import { test } from 'tap';
import sinon from 'sinon';
import AndroidSafenetFormat from '../../../../src/attestation/format/androidSafetynet/androidSafetynet';
import crypto from 'crypto';
import str2ab from 'str2ab';
import parseCoseKey from 'parse-cosekey';
import cbor from 'cbor';
import dayjs from 'dayjs';
import { FslAndroidSafetynetFormatVerifyResultOthers } from '../../../../src/type';

const parse = async (attestationObject: string, clientDataJSON: string) => {
  const cBuf: Buffer = str2ab.arraybuffer2buffer(str2ab.base64url2arraybuffer(clientDataJSON));
  const clientDataJSONHash: Buffer = crypto.createHash('sha256').update(cBuf).digest();

  const decodedAO = cbor.decodeAllSync(str2ab.arraybuffer2buffer(str2ab.base64url2arraybuffer(attestationObject)));
  const attStmt = decodedAO[0]['attStmt'];
  const authData = decodedAO[0]['authData'];
  const attestedCredentialData: Buffer = authData.slice(32 + 1 + 4);
  const credentialIdLength: Buffer = attestedCredentialData.slice(16, 16 + 2);
  const credentialIdLengthNumber: number = credentialIdLength.readUInt16BE();
  const credentialId: Buffer = attestedCredentialData.slice(16 + 2, 16 + 2 + credentialIdLengthNumber);
  const credentialPublicKey: Buffer = attestedCredentialData.slice(16 + 2 + credentialIdLengthNumber);
  const decodedCredentialPublicKey: any[] = cbor.decodeAllSync(credentialPublicKey);
  const coseCredentialPublicKey = decodedCredentialPublicKey[0];
  const jwkResult = parseCoseKey.KeyParser.cose2jwk(coseCredentialPublicKey);
  const alg = Number(coseCredentialPublicKey.get(3));
  const pem: string = await parseCoseKey.KeyParser.cose2pem(coseCredentialPublicKey);

  const rpIdHash: Buffer = authData.slice(0, 32);

  return {
    attStmt,
    result: {
      attestationObject: decodedAO[0],
      fmt: decodedAO[0]['fmt'],
      authData,
      clientDataJSONHash,
      pem,
      jwk: jwkResult,
      credentialId: {
        buffer: credentialId,
        base64url: str2ab.buffer2base64url(credentialId),
      },
      alg,
      rpIdHash,
      coseCredentialPublicKey,
    },
  };
};

test('# AndroidSafetynetFormat', (t) => {
  t.test('## getName', (t) => {
    t.test('### android-safetynet', (t) => {
      const name = AndroidSafenetFormat.getName();

      t.equal(name, 'android-safetynet');
      t.end();
    });

    t.end();
  });

  t.test('## config', (t) => {
    t.test('### config', (t) => {
      const none = new AndroidSafenetFormat();
      none.config(
        {
          attStmt: 'value',
        } as any,
        {
          result: 'value',
        } as any,
        {
          expectation: 'value',
        } as any,
        {
          configure: 'value',
        } as any
      );

      t.same(none.attStmt, { attStmt: 'value' });
      t.same(none.result, { result: 'value' });
      t.same(none.expectation, { expectation: 'value' });
      t.same(none.configure, { configure: 'value' });
      t.end();
    });
    t.end();
  });

  t.test('## verify', (t) => {
    t.test('### valid', async (t) => {
      const clock = sinon.useFakeTimers({
        now: dayjs('2022-08-07T00:29:50.000Z').valueOf(),
      });

      const attestationObject =
        '';
      const clientDataJSON =
        'eyJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdC5zMXItai50azozMDAwIiwiY2hhbGxlbmdlIjoiNmFRMk5Id28weUR0OGZHeExTc05FOXEwcUtNbVhBYk92VXBua0pPLUJCeWRTWThiUmNJRnpDaENfSzN6RTZ5R0ZVQkZ5dS1tem51VDJPUlFRWmVfOGciLCJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIn0';
      const { attStmt, result } = await parse(attestationObject, clientDataJSON);

      const as = new AndroidSafenetFormat();
      as.config(attStmt, result as any, {} as any, {});

      const verified = await as.verify();

      clock.restore();
      t.ok(verified.isValid);
      t.same(verified.attestationType, ['Basic']);
      t.ok(Array.isArray(verified.attestationTrustPath));
      t.notSame(verified.attestationStatementAlg, null);
      t.notSame(verified.attestationStatementX5c, null);
      t.ok(verified.isValidCertificateChain);
      const others = verified.others as FslAndroidSafetynetFormatVerifyResultOthers;
      if (others != null) {
        t.equal(others.attestationFormat, 'android-safetynet');
        t.notSame(others.response, null);
        t.notSame(others.ver, null);
        t.notSame(others.headerJSON, null);
        t.notSame(others.payloadJSON, null);
        t.notSame(others.signature, null);
        t.notSame(others.timestampMs, null);
        t.notSame(others.nonce, null);
        t.notSame(others.apkPackageName, null);
        t.notSame(others.apkCertificateDigestSha256, null);
        t.notSame(others.ctsProfileMatch, null);
        t.notSame(others.basicIntegrity, null);
      } else {
        t.fail();
      }

      t.end();
    });

    t.test('### ver or response is not contained in attStmt', async (t) => {
      const attestationObject =
        '';
      const clientDataJSON =
        'eyJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdC5zMXItai50azozMDAwIiwiY2hhbGxlbmdlIjoiRkpYc21vY3ROQ2Rmb1VISzU4Sko5bW4zUGVwY1BZb3QtdVN2MW8zTGdCQm5VQ1lWRFB0alg2eVdjTlZFNUhxVGc2cVduT05KZkVjajFCbmNXaWJZZ2ciLCJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIn0';
      const { attStmt, result } = await parse(attestationObject, clientDataJSON);

      const as = new AndroidSafenetFormat();
      as.config(attStmt, result as any, {} as any, {});

      try {
        const verified = await as.verify();
        t.fail('not come here');
      } catch (err) {
        t.match(err.message, /android-safetynet:ver and response must be contained in attStmt*/);
      }

      t.end();
    });

    t.test('### JWS is malformat', async (t) => {
      const attestationObject =
        'o2NmbXRxYW5kcm9pZC1zYWZldHluZXRnYXR0U3RtdKJjdmVyaDEyNjg1MDIzaHJlc3BvbnNlYGhhdXRoRGF0YVkBZ4hHbR1KvnQ1gf1-vaAt5QBKFeyReXOrVDqDLyzYe24ZQQAAAIDIfN2XVsFJuJ4kyzY2VPNQACCzVm4aaVhbAz7bvsnhqa1Tvj-kVkS9eWGUt2yWLVMD6aQBAwM5AQAgWQEAsqhH9UdyhbQXTJCO1plKTP4ZH5Zr48SAr0sqkHyau4VNfHavZn-5KaWe_MzpJ2j9Jgmz-Vefdf6tFz1Z6bjX6XvSIUjoPIHCB-MddJpMzRt72Z3bHV6SqJnmdC4BADDxl6YbsX5JLOHxO9KnMTb1OoM4ourSBKQthtwAHmNPLjaoAyOUlck0nyCbek984eyQzjEHba4_IFtvFDJccDuSQ05hFqD50DbQJkniG8LPkwapyIPG-nveClraPWvHTLXuJ22QtG8BHkzUXjcbEEu1vfMsWEYcVQOpb-FvaGfySh3ty-r4jsouVKbiHZN8pLojX8q2YRDyJHbgqXk_oXQ2JyFDAQAB';
      const clientDataJSON =
        'eyJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdC5zMXItai50azozMDAwIiwiY2hhbGxlbmdlIjoiaDRUNkc3NlpkRm0ya0V0Ql9BdFpKenhFYTlnWElVeThSVVlMREszUUZBZkdsdXg1aHNveC1pQktBMTRyT1JGeDFLVDFIRi03ekpZcEd2OTFPOGdtcVEiLCJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIn0';
      const { attStmt, result } = await parse(attestationObject, clientDataJSON);

      const as = new AndroidSafenetFormat();
      as.config(attStmt, result as any, {} as any, {});

      try {
        const verified = await as.verify();
        t.fail('not come here');
      } catch (err) {
        t.match(err.message, /android-safetynet:JWS is malformat\.*/);
      }

      t.end();
    });

    t.test('### timestampMs is after now', async (t) => {
      const clock = sinon.useFakeTimers({
        now: dayjs('2022-08-07T01:29:30.156Z').valueOf(),
      });

      const attestationObject =
        '';
      const clientDataJSON =
        'eyJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdC5zMXItai50azozMDAwIiwiY2hhbGxlbmdlIjoiU1JRUE9ZMzkxTGZNQWtVc1NvakZqOVNza0pvaUk3ZFRNWEJYZ2ltdzRPLVJtRmZfMDZ3eFQwYl9BTkpRNTFnR0ZuUUViQkhDYkw3QU1MVTRLQmZ4VkEiLCJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIn0';
      const { attStmt, result } = await parse(attestationObject, clientDataJSON);

      const as = new AndroidSafenetFormat();
      as.config(attStmt, result as any, {} as any, {});

      try {
        const verified = await as.verify();
        t.fail('not come here');
      } catch (err) {
        t.match(err.message, /android-safetynet:timestampMs\([0-9]+\) is invalid to now\([0-9]+\)\.*/);
      } finally {
        clock.restore();
      }

      t.end();
    });

    t.test('### timestampMs is before more than 1 minute', async (t) => {
      const clock = sinon.useFakeTimers({
        now: dayjs('2022-08-07T01:28:30.154Z').valueOf(),
      });

      const attestationObject =
        '';
      const clientDataJSON =
        'eyJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdC5zMXItai50azozMDAwIiwiY2hhbGxlbmdlIjoiU1JRUE9ZMzkxTGZNQWtVc1NvakZqOVNza0pvaUk3ZFRNWEJYZ2ltdzRPLVJtRmZfMDZ3eFQwYl9BTkpRNTFnR0ZuUUViQkhDYkw3QU1MVTRLQmZ4VkEiLCJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIn0';
      const { attStmt, result } = await parse(attestationObject, clientDataJSON);

      const as = new AndroidSafenetFormat();
      as.config(attStmt, result as any, {} as any, {});

      try {
        const verified = await as.verify();
        t.fail('not come here');
      } catch (err) {
        t.match(err.message, /android-safetynet:timestampMs\([0-9]+\) is invalid to now\([0-9]+\)\.*/);
      } finally {
        clock.restore();
      }

      t.end();
    });

    t.test('### ctsProfileMatch is false', async (t) => {
      const clock = sinon.useFakeTimers({
        now: dayjs('2022-08-14T15:07:01.278Z').valueOf(),
      });

      const attestationObject =
        '';
      const clientDataJSON =
        'eyJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdC5zMXItai50azozMDAwIiwiY2hhbGxlbmdlIjoibktKNkVPU2d4WU9Sa2w4VU41MTdwa2t0LVhPbF85NmpEa0I3VXJJdWo4bFFxUnlseTNzUjdBa1ZfNFdJdzZoQmZ4Z1FsYXRkYXNaZzlXYTFyZS15ZGciLCJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIn0';
      const { attStmt, result } = await parse(attestationObject, clientDataJSON);

      const as = new AndroidSafenetFormat();
      as.config(attStmt, result as any, {} as any, {});

      try {
        const verified = await as.verify();
        t.fail('not come here');
      } catch (err) {
        t.match(err.message, /android-safetynet:ctsProfileMatch is false*/);
      } finally {
        clock.restore();
      }

      t.end();
    });

    t.test('### basicIntegrity is false', async (t) => {
      const clock = sinon.useFakeTimers({
        now: dayjs('2022-08-07T00:29:50.000Z').valueOf(),
      });

      const attestationObject =
        '';
      const clientDataJSON =
        'eyJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdC5zMXItai50azozMDAwIiwiY2hhbGxlbmdlIjoiNmFRMk5Id28weUR0OGZHeExTc05FOXEwcUtNbVhBYk92VXBua0pPLUJCeWRTWThiUmNJRnpDaENfSzN6RTZ5R0ZVQkZ5dS1tem51VDJPUlFRWmVfOGciLCJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIn0';
      const { attStmt, result } = await parse(attestationObject, clientDataJSON);

      const as = new AndroidSafenetFormat();
      as.config(
        {
          ...attStmt,
          response: str2ab.string2arraybuffer(
            [
              str2ab.string2base64url(JSON.stringify({})),
              str2ab.string2base64url(
                JSON.stringify({
                  timestampMs: 1659832190000,
                  nonce: 'nonce',
                  apkPackageName: 'apn',
                  apkCertificateDigestSha256: 'sha256',
                  ctsProfileMatch: true,
                  basicIntegrity: false,
                })
              ),
              'signature',
            ].join('.')
          ),
        },
        result as any,
        {} as any,
        {}
      );

      try {
        const verified = await as.verify();
        t.fail('not come here');
      } catch (err) {
        t.match(err.message, /android-safetynet:basicIntegrity is false*/);
      } finally {
        clock.restore();
      }

      t.end();
    });

    t.test('### result is null', async (t) => {
      const clock = sinon.useFakeTimers({
        now: dayjs('2022-08-07T00:29:50.000Z').valueOf(),
      });

      const attestationObject =
        '';
      const clientDataJSON =
        'eyJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdC5zMXItai50azozMDAwIiwiY2hhbGxlbmdlIjoiNmFRMk5Id28weUR0OGZHeExTc05FOXEwcUtNbVhBYk92VXBua0pPLUJCeWRTWThiUmNJRnpDaENfSzN6RTZ5R0ZVQkZ5dS1tem51VDJPUlFRWmVfOGciLCJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIn0';
      const { attStmt, result } = await parse(attestationObject, clientDataJSON);

      const as = new AndroidSafenetFormat();
      as.config(attStmt, null as any, {} as any, {});

      try {
        const verified = await as.verify();
        t.fail('not come here');
      } catch (err) {
        t.match(err.message, /android-safetynet:Data is not enough*/);
      } finally {
        clock.restore();
      }

      t.end();
    });

    t.test('### result.authData is null', async (t) => {
      const clock = sinon.useFakeTimers({
        now: dayjs('2022-08-07T00:29:50.000Z').valueOf(),
      });

      const attestationObject =
        '';
      const clientDataJSON =
        'eyJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdC5zMXItai50azozMDAwIiwiY2hhbGxlbmdlIjoiNmFRMk5Id28weUR0OGZHeExTc05FOXEwcUtNbVhBYk92VXBua0pPLUJCeWRTWThiUmNJRnpDaENfSzN6RTZ5R0ZVQkZ5dS1tem51VDJPUlFRWmVfOGciLCJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIn0';
      const { attStmt, result } = await parse(attestationObject, clientDataJSON);

      const as = new AndroidSafenetFormat();
      as.config(
        attStmt,
        {
          ...result,
          authData: null,
        } as any,
        {} as any,
        {}
      );

      try {
        const verified = await as.verify();
        t.fail('not come here');
      } catch (err) {
        t.match(err.message, /android-safetynet:Data is not enough*/);
      } finally {
        clock.restore();
      }

      t.end();
    });

    t.test('### result.clientDataJSONHash is null', async (t) => {
      const clock = sinon.useFakeTimers({
        now: dayjs('2022-08-07T00:29:50.000Z').valueOf(),
      });

      const attestationObject =
        '';
      const clientDataJSON =
        'eyJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdC5zMXItai50azozMDAwIiwiY2hhbGxlbmdlIjoiNmFRMk5Id28weUR0OGZHeExTc05FOXEwcUtNbVhBYk92VXBua0pPLUJCeWRTWThiUmNJRnpDaENfSzN6RTZ5R0ZVQkZ5dS1tem51VDJPUlFRWmVfOGciLCJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIn0';
      const { attStmt, result } = await parse(attestationObject, clientDataJSON);

      const as = new AndroidSafenetFormat();
      as.config(
        attStmt,
        {
          ...result,
          clientDataJSONHash: null,
        } as any,
        {} as any,
        {}
      );

      try {
        const verified = await as.verify();
        t.fail('not come here');
      } catch (err) {
        t.match(err.message, /android-safetynet:Data is not enough*/);
      } finally {
        clock.restore();
      }

      t.end();
    });

    t.end();
  });

  t.test('### nonce is not equal', async (t) => {
    const clock = sinon.useFakeTimers({
      now: dayjs('2022-08-14T15:07:00.817Z').valueOf(),
    });

    const attestationObject =
      '';
    const clientDataJSON =
      'eyJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdC5zMXItai50azozMDAwIiwiY2hhbGxlbmdlIjoibjBJSnBkWkZHdzE0T2VqRmUwOVQ0UlVQbmgzV3pucFhMR3RKUmd0MGFtZE4tcW9WWUU4a0NKUW5qb2JkbWNIcjlmbHhPU1RCbGRLRTA5TUNlbFJPa2ciLCJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIn0';
    const { attStmt, result } = await parse(attestationObject, clientDataJSON);

    const as = new AndroidSafenetFormat();
    as.config(attStmt, result as any, {} as any, {});

    try {
      const verified = await as.verify();
      t.fail('not come here');
    } catch (err) {
      t.match(
        err.message,
        /android-safetynet:nonce is not equal to Base64 encoding of the SHA-256 hash of the concatenation of authenticatorData and clientDataHash*/
      );
    } finally {
      clock.restore();
    }

    t.end();
  });

  t.end();
});
